<?go
package cmd

import (
	"fmt"
	"io"
	"maps"

	"deedles.dev/xiter"
	"github.com/igadmg/gogen/core"
)

func (g *GeneratorEcs) generate(wr io.Writer, pkg string) {
?>
// autogenerated code
package <?= pkg ?>

import (
	"iter"
	"slices"

	ecs "github.com/igadmg/goecs"
	"github.com/igadmg/goex/slicesex"
	"github.com/igadmg/raylib-go/raymath/vector2"
)

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
//// Systems for <?= len(g.systems) ?> types
///
<?
	for _, t := range g.systems {
		g.generateSystem(wr, t)
	}
?>

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
//// Entities num <?= len(g.entities) ?>
///

var _ bool = _Entity_constraints(false)

func _Entity_constraints(v bool) bool {
	if !v {
		return true
	}

<?
	for e := range maps.Values(g.entities) {
?>
	_<?= e.Name ?>_constraints()
<?
	}
?>

	return true
}

<?
	for i, e := range xiter.Enumerate(maps.Values(g.entities)) {
?>

//////////
// <?= e.Name ?>
<?
		g.generateArchetype(wr, i+1, e)

		qt := NewType()
		qt.Name= e.Name + "Query"
		qt.Tag, _ = core.MakeTag("query: {" + e.QueryTags + "}")
		qt.Fields = e.Fields
		g.queries[qt.Name] = qt
		g.EntitesByQueries[qt] = append(g.EntitesByQueries[qt], e)
	}
?>

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
//// Components num <?= len(g.components) ?>
///
<?
	for _, e := range xiter.Enumerate(maps.Values(g.components)) {
		g.generateComponent(wr, e)
?>
//////////
// <?= e.Name ?>
<?
	}
?>

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
//// Queries num <?= len(g.EntitesByQueries) ?>
///

var _ bool = _Query_constraints(false)

func _Query_constraints(v bool) bool {
	if !v {
		return true
	}

<?
	for q := range g.EntitesByQueries {
?>
	_<?= q.Name ?>_constraints()
<?
	}
?>

	return true
}
<?
	for q, es := range g.EntitesByQueries {
?>
//////////
// <?= q.Name ?>
<?
		g.generateQuery(wr, q, es)
	}

?>

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
//// Functions for <?= len(g.Types) ?> types
///

<?
	for _, t := range g.Types {
		g.generateFunctions(wr, t)
	}


////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
//// Debug
///

	g.generateDebug(wr)
}
?>